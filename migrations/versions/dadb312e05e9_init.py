"""init

Revision ID: dadb312e05e9
Revises: 
Create Date: 2020-08-05 11:37:26.336862

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime
from sqlalchemy import exc, Session

# https://alembic.sqlalchemy.org/en/latest/ops.html

# revision identifiers, used by Alembic.
revision = 'dadb312e05e9'
down_revision = None
branch_labels = None
depends_on = None

def drop_all_table():
    try:
        # Some platform like postgre FORCE us to COMMIT or ROLLBACK after each failed sql
        bind = op.get_bind()
        session = Session(bind=bind)
        print("[drop_all_table] {0}".format(bind.engine.name))
        if bind.engine.name == "postgre":
            print("Running on POSTGRE")
        # For a clean init
        op.drop_table('tbl_user_role')
        op.drop_table('tbl_users')
        op.drop_table('tbl_roles')
    except exc.ProgrammingError as e: #pg8000
        if 'DropErrorMsgNonExistent' in str(e):
            # print(e['M'])
            print("No table found. We ignore dropping it")
            pass
        else:
            raise(e)
        session.rollback() # A must from POSTGRE
    except exc.OperationalError as e: 
        if "no such table" in str(e): #sqlite
            print("No table found. We ignore dropping it")
            pass
        elif "Unknown table" in str(e): #pymysql.err.OperationalError) (1051, "Unknown table 'test.tbl_roles'")
            print("No table found. We ignore dropping it")
            pass
        else:
            raise(e)
    except Exception as e:
        raise(e)

def add_seed():
    print("[add_seed] Begin")
    tbl_roles = sa.sql.table( 'tbl_roles',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('role', sa.String(length=255), nullable=False),
        sa.Column('description', sa.String(length=500), nullable=True)
    )
    
    tbl_users = sa.sql.table('tbl_users',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password', sa.String(length=500), nullable=True),
        sa.Column('fullname', sa.String(length=255), nullable=False),
        sa.Column('status', sa.Integer(), nullable=False),
        sa.Column('authtype', sa.Integer(), nullable=False),
        sa.Column('created_date', sa.DateTime(timezone=True), nullable=False, default=datetime.utcnow),
        sa.Column('updated_date', sa.DateTime(timezone=True), nullable=False, default=datetime.utcnow)
    )
    
    tbl_user_role = sa.sql.table('tbl_user_role',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_email', sa.String(length=255), nullable=False),
        sa.Column('role_role', sa.String(length=255), nullable=False)
    )
    
    op.bulk_insert(
        tbl_roles,
        [
            {'role':'admin', 'description': 'Administrator'},
            {'role':'user', 'description': 'Normal User'}
        ]        
    )
    
    op.bulk_insert(
        tbl_users,
        [
            {'email':'admin@myflask.com', 'password':"pbkdf2:sha256:150000$8MeWtFuN$22dd4d822ec9bc71d16841579a2bf4de92f2e2c3581341181627f7f96b03a647",'fullname':"Admin", 'status':1, 'authtype':0},
            {'email':'user@myflask.com',  'password':"pbkdf2:sha256:150000$8MeWtFuN$22dd4d822ec9bc71d16841579a2bf4de92f2e2c3581341181627f7f96b03a647",'fullname':"User",  'status':1, 'authtype':0}
        ]        
    )
    
    op.bulk_insert(
        tbl_user_role,
        [
            {'user_email':'admin@myflask.com', 'role_role': 'admin'},
            {'user_email':'user@myflask.com',  'role_role': 'user'},
            # {'user_email':'loitd@myflask.com', 'role_role': 'test'}
        ]        
    )
    print("[add_seed] Done")


def upgrade():
    print("[upgrade] Begin")
    drop_all_table()
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tbl_roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role')
    )
    op.create_table('tbl_users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=500), nullable=True),
    sa.Column('fullname', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('authtype', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(timezone=True), nullable=False, default=datetime.utcnow),
    sa.Column('updated_date', sa.DateTime(timezone=True), nullable=False, default=datetime.utcnow),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('tbl_user_role',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_email', sa.String(length=255), nullable=False),
    sa.Column('role_role', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['role_role'], ['tbl_roles.role'], ),
    sa.ForeignKeyConstraint(['user_email'], ['tbl_users.email'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    add_seed()
    print("[upgrade] Done")


def downgrade():
    print("[downgrade] Begin")
    # ### commands auto generated by Alembic - please adjust! ###
    drop_all_table()
    # ### end Alembic commands ###
    print("[downgrade] Done")
